# This is the complex Travis configuration, which is intended for use
# on open source libraries which need compatibility across multiple GHC
# versions, must work with cabal-install, and should be
# cross-platform. For more information and other options, see:
#
# https://docs.haskellstack.org/en/stable/travis_ci/
#
# Copy these contents into the root directory of your Github project in a file
# named .travis.yml

# Use new container infrastructure to enable caching
sudo: false

# Do not choose a language; we provide our own build tools.
language: generic

# Caching so the next build will be fast too.
cache:
  directories:
  - $HOME/.ghc
  - $HOME/.cabal
  - $HOME/.stack
  - .stack-work

env:
  global:
  - ENCRYPTION_LABEL: "8a44b50cd00b"
  - COMMIT_AUTHOR_EMAIL: "sgraf1337@gmail.com"

# The different configurations we want to test. We have BUILD=cabal which uses
# cabal-install, and BUILD=stack which uses Stack. More documentation on each
# of those below.
#
# We set the compiler values here to tell Travis to use a different
# cache file per set of arguments.
#
# If you need to have different apt packages for each combination in the
# matrix, you can use a line such as:
#     addons: {apt: {packages: [libfcgi-dev,libgmp-dev]}}
matrix:
  include:
  # We grab the appropriate GHC and cabal-install versions from hvr's PPA. See:
  # https://github.com/hvr/multi-ghc-travis

  # Screw transitive dependencies of `ghc`
  # - env: BUILD=cabal GHCVER=8.0.2 CABALVER=1.24 HAPPYVER=1.19.5 ALEXVER=3.1.7
  #   compiler: ": #GHC 8.0.2"
  #   addons: {apt: {packages: [cabal-install-1.24,ghc-8.0.2,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHCVER=8.2.2 CABALVER=2.0 HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC 8.2.2"
    addons: {apt: {packages: [cabal-install-2.0,ghc-8.2.2,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHCVER=8.4.4 CABALVER=2.2 HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC 8.4.4"
    addons: {apt: {packages: [cabal-install-2.2,ghc-8.4.4,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}
  - env: BUILD=cabal GHCVER=8.6.5 CABALVER=2.2 HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC 8.6.5"
    addons: {apt: {packages: [cabal-install-2.2,ghc-8.6.5,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # Build with the newest GHC and cabal-install. This is an accepted failure,
  # see below.
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
    compiler: ": #GHC HEAD"
    addons: {apt: {packages: [cabal-install-head,ghc-head,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # The Stack builds. We can pass in arbitrary Stack arguments via the ARGS
  # variable, such as using --stack-yaml to point to a different file.
  - env: BUILD=stack ARGS="" DOCS=deploy
    compiler: ": #stack default"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-9.yaml"
    compiler: ": #stack 8.0.2"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-11.yaml"
    compiler: ": #stack 8.2.2"
    addons: {apt: {packages: [libgmp-dev]}}

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-12.yaml"
    compiler: ": #stack 8.4.4"
    addons: {apt: {packages: [libgmp-dev]}}

  # Check that the build succeeds when not depending on `lattices`
  - env: BUILD=stack ARGS="--flag pomaps:no-lattices --flag datafix:no-lattices"
    compiler: ": #stack default without lattices"
    addons: {apt: {packages: [libgmp-dev]}}

  # This just checks style rules
  - env: BUILD=style GHCVER=8.6.4
    compiler: ": #stack 8.6.4 style"
    addons: {apt: {packages: [cabal-install-2.4,ghc-8.6.4,happy-1.19.5,alex-3.1.7], sources: [hvr-ghc]}}

  # Nightly builds are allowed to fail
  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly"
    addons: {apt: {packages: [libgmp-dev]}}

  # Build on macOS in addition to Linux
  - env: BUILD=stack ARGS=""
    compiler: ": #stack default osx"
    os: osx

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-9.yaml"
    compiler: ": #stack 8.0.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-11.yaml"
    compiler: ": #stack 8.2.2 osx"
    os: osx

  - env: BUILD=stack ARGS="--stack-yaml=stack-lts-12.yaml"
    compiler: ": #stack 8.4.4 osx"
    os: osx

  - env: BUILD=stack ARGS="--resolver nightly"
    compiler: ": #stack nightly osx"
    os: osx

  allow_failures:
  - env: BUILD=cabal GHCVER=head  CABALVER=head HAPPYVER=1.19.5 ALEXVER=3.1.7
  - env: BUILD=stack ARGS="--resolver nightly"

before_install:
# Using compiler above sets CC to an invalid value, so unset it
- unset CC

# We want to always allow newer versions of packages when building on GHC HEAD
- CABALARGS=""
- if [ "x$GHCVER" = "xhead" ]; then CABALARGS=--allow-newer; fi
- export CABALARGS

# Download and unpack the stack executable
- export PATH=/opt/ghc/$GHCVER/bin:/opt/cabal/$CABALVER/bin:$HOME/.local/bin:/opt/alex/$ALEXVER/bin:/opt/happy/$HAPPYVER/bin:$HOME/.cabal/bin:$PATH
- mkdir -p ~/.local/bin
- |
  if [ `uname` = "Darwin" ]
  then
    travis_retry curl --insecure -L https://www.stackage.org/stack/osx-x86_64 | tar xz --strip-components=1 --include '*/stack' -C ~/.local/bin
  else
    travis_retry curl -L https://www.stackage.org/stack/linux-x86_64 | tar xz --wildcards --strip-components=1 -C ~/.local/bin '*/stack'
  fi

  # Use the more reliable S3 mirror of Hackage
  mkdir -p $HOME/.cabal
  echo 'remote-repo: hackage.haskell.org:http://hackage.fpcomplete.com/' > $HOME/.cabal/config
  echo 'remote-repo-cache: $HOME/.cabal/packages' >> $HOME/.cabal/config

  if [ "$CABALVER" != "1.16" ]
  then
    echo 'jobs: $ncpus' >> $HOME/.cabal/config
  fi

# Get the list of packages from the stack.yaml file
# But ignore packages in .stack-work (such as extra-deps)
- export PACKAGES=$(stack --install-ghc query locals | grep '^ *path' | sed 's@^ *path:@@' | xargs -d "\n" -I{} bash -c "! [[ '{}' =~ \\.stack-work ]] && echo '{}'" | tr -d '[:space:]')

install: .travis/install.sh
script: .travis/script.sh
after_success: .travis/after_success.sh